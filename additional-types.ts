// ? Any в данный тип можно вложить любой тип данных
// ! Данное присвоение типа не рекомендуется, так как ничем не отличается от JS и TS ошибки выводить не будет, когда присваивается другой тип данных
let test: any = 123;
test = '14123';
//!  Метод .map(), TypeScript не ругается, так как any не проверяет типы и позволяет это делать.
test.map();

//? Тип unknown похож на any, но с ним нельзя напрямую выполнять операции или присваивать значения без проверки.
//! Нельзя присвоить без указания типа данных
let test2: unknown = 1234;
let str213: string = test;

if (typeof test2 === 'string') {
	let str213: string = test2;
}

//? Тип void используется для обозначения функций, которые ничего не возвращают.
//! По умолчанию TS выдает ошибку, если функция нечего не возвращает, данное слово позволяет обойти эту ошибку
function f(arg: string, next: string): void {
	console.log('Hello world');
}

const f2 = (arg: string, next: string): void => {
	console.log('Hello world');
};
